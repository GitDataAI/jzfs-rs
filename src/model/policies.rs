//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use lazy_static::lazy_static;
use sea_orm::entity::prelude::*;
use sea_orm::FromJsonQueryResult;
use serde::{Deserialize, Serialize};

pub type ResourceType = String;

lazy_static!(
    pub static ref RepoRT: ResourceType = String::from("repo");
    pub static ref UserRT: ResourceType = String::from("user");
    pub static ref AuthRT: ResourceType = String::from("auth");

);

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "policies")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub name: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub statements: Statements,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Clone,Debug,PartialEq,Eq,Serialize,Deserialize,FromJsonQueryResult)]
pub struct Statements(pub Vec<Statement>);

#[derive(Clone,Debug,PartialEq,Eq,Serialize,Deserialize)]
pub struct Statement{
    pub effect: String,
    pub action: Vec<String>,
    pub resource: ResourceType
}


#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
